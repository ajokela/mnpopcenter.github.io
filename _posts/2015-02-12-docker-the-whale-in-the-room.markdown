---
layout: page
status: publish
published: true
title: 'Docker: Ignoring the Whale in the Room'
author:
  display_name: Dan Elbert
  login: delbert
  email: delbert@umn.edu
  url: ''
author_login: delbert
author_email: delbert@umn.edu
excerpt: Dan takes a look a Docker, a new and interesting technology for containerizing
  application environments, and does an experiment to see if Docker is a viable method
  for setting up development (or even production) environments for our web apps.
wordpress_id: 527
wordpress_url: http://tech.popdata.org/?p=527
date: '2015-02-12 13:13:48 -0600'
date_gmt: '2015-02-12 19:13:48 -0600'
categories:
- Featured
- Dev Ops
tags: []
comments: []
---
<p>Docker is a new and interesting technology. I'd read about it and spent some time creating images and containers at home, but I always struggled to understand what it would look like to use Docker every day working on a non-trivial application. I wondered if it could be useful at the MPC, if we could use it to run tests more consistently, if we could use it to create development environments faster, or if we might even be able to realistically run containers in production.</p>
<h3>So It's Like a VM?</h3></p>
<p>What is Docker, then? Why is it interesting? I've often heard (and said myself a few times) that Docker containers are similar to ultra-lightweight VMs, but that's not quite accurate. Docker makes use of Linux kernel features (specifically: Linux namespaces and cgroups) to isolate container processes from their host OS. Containers have their own process space, networking, and root file system. A container must include all software and dependencies it needs, but there's no virtualized hardware.</p>
<p>In addition to the containerization technology, Docker also makes use of AuFS, a layered differencing filesystem. This allows images to be built on top of each other in layers, simplifying container development and deployment.</p>
<p>Finally there's the Docker Registry. Similar in nature to public source repositories like Github or Bitbucket, the Docker Registry allows users to push, pull, and share Docker images. Because of the registry, many simple, fully functional images can be obtained for free, and more complex ones can be built using them as a starting point.</p>
<h3>A Small Docker Experiment</h3></p>
<p>I set out to answer some of my own lingering questions, scoped to the perspective of a developer. I'm not an ops person, so it would be difficult (if not naive) to go into the details of how we might structure a docker deployment in production.</p>
<p>First, an overview of the application I used as a case study, our IPUMS codebase. It's a jruby/rails application that powers the front end of many of our data projects: IPUMS International, IPUMS USA, American Time Use Survey X, amongst others. Each project has different features toggled, different css, and other customizations. The Docker solution is going to have to support running the application as any project, and in the best case, multiple projects at once.</p>
<p>The application has a few moving parts:</p>
<ul>
<li>A rails web application</li>
<li>An extract engine daemon</li>
<li>A shared user database</li>
<li>A database per project</li>
<li>Several cron jobs and rake tasks that are periodically manually run</li><br />
</ul></p>
<p>Both the web application and the extract engine need access to the databases. The web application needs to be able to serve the files generated by the extract engine. The MySQL databases should be persistent, even if the containers are re-created. Since this is going to focus on development, I'll skip the cron jobs and rake tasks.</p>
<h3>The Technical Nitty Gritty</h3></p>
<p>Given those bits, how might they be divided into Docker images and containers? It's generally advocated that a docker container only contain a single process or service. I'm also going to use data volume containers (a pattern described in detail here: <a href="https://docs.docker.com/userguide/dockervolumes/">https://docs.docker.com/userguide/dockervolumes/</a>) We're probably looking at 6 containers:</p>
<ul>
<li>MySQL Data Container: A container that exposes a shared volume for SQL data</li>
<li>Extracts Data Container: A container that exposes a shared volume for extracts</li>
<li>Web Container: runs rails app</li>
<li>Extract Container: runs extract engine</li>
<li>DB Container: hosts MySQL</li>
<li>Reverse Proxy Container: When running multiple projects at once, this will proxy requests to the correct application/container</li><br />
</ul></p>
<p>I'll need at least three images: one for the IPUMS code, one for the DB, and one for the proxy. It's tempting to build two IPUMS images: one for the web application and one for the extract engine. For a production deployment, that might even be the best way to go. However, I want to keep this simple so will build a single IPUMS image that will run the web application or extract engine based on environment variables.</p>
<p>There are already many MySQL and nginx images (including officially supported images from Docker) available, so I'll use those for the database and proxy containers. I'll have to build my own IPUMS image, however. After reading some of Phusion's Docker related articles, I've chosen to use the phusion/baseimage as the base. The rationale is described in excellent detail here: <a href="https://github.com/phusion/baseimage-docker">https://github.com/phusion/baseimage-docker</a></p>
<p>I'll start by adding a Dockerfile to the project root. The only system dependencies I need added to the baseimage are java and jruby. Then I'll need to add the IPUMS application itself, its gems, and scripts to start the webserver or extract engine. My IPUMS Dockerfile looks like this:</p>
<p>[code]<br />
FROM phusion/baseimage:latest</p>
<p>RUN apt-get update &amp;amp;&amp;amp; apt-get install -y openjdk-7-jdk</p>
<p>ENV JRUBY_VERSION 1.7.19</p>
<p>RUN mkdir -p /opt/jruby/<br />
RUN curl "https://s3.amazonaws.com/jruby.org/downloads/$JRUBY_VERSION/jruby-bin-$JRUBY_VERSION.tar.gz" &amp;gt; /opt/jruby/jruby-bin-$JRUBY_VERSION.tar.gz</p>
<p>RUN tar -x -C /opt/jruby/ -f /opt/jruby/jruby-bin-$JRUBY_VERSION.tar.gz<br />
RUN ln -s /opt/jruby/jruby-$JRUBY_VERSION/ /opt/jruby/current<br />
RUN ln -s /opt/jruby/jruby-$JRUBY_VERSION/bin/jruby /opt/jruby/jruby-$JRUBY_VERSION/bin/ruby</p>
<p>ENV PATH $PATH:/opt/jruby/current/bin<br />
RUN gem install bundler</p>
<p>RUN mkdir -p /ipums<br />
COPY Gemfile /ipums/<br />
COPY Gemfile.lock /ipums/<br />
WORKDIR /ipums<br />
RUN bundle install</p>
<p>COPY . /ipums</p>
<p>RUN mkdir -p /etc/service/webserver/<br />
RUN mkdir -p /etc/service/extract_engine/<br />
COPY docker/webserver /etc/service/webserver/run<br />
COPY docker/extract_engine /etc/service/extract_engine/run</p>
<p>EXPOSE 3000</p>
<p>ENV RUN_WEBSERVER true<br />
ENV RUN_EXTRACT_ENGINE=""<br />
ENV RAILS_ENV docker_usa<br />
ENV IPUMS_PROJECT usa<br />
[/code]</p>
<p>To control whether the container starts the webserver, the extract engine (or both), the RUN_WEBSERVER and RUN_EXTRACT_ENGINE are read by the run scripts installed to /etc/service. Here's what the webserver run script looks like:</p>
<p>[code]<br />
#! /bin/bash</p>
<p>if [ "true" = "$RUN_WEBSERVER" ]; then<br />
echo "running webserver..."<br />
export JRUBY_OPTS='-J-d64 -J-Xmx4g -J-Xms384m'</p>
<p>cd /ipums<br />
jruby --server -S bundle exec trinidad -e $RAILS_ENV -c /$IPUMS_PROJECT-action -d /ipums --address 0.0.0.0 --port 3000</p>
<p>else<br />
echo "skipping webserver..."<br />
sleep infinity<br />
fi<br />
[/code]</p>
<p>Before I can run a container, though, I'll have to create and seed a MySQL volume container. Our IPUMS codebase already has a script to help developers seed their local DBs, so I'll co-opt it to seed a mysql instance in a container with a new script called docker_init.sh. This is how it works: It creates (but doesn't run) two volume containers if they don't exist: ipums_db_data and ipums_extract_data. These will exist outside the rest of the configuration and will persist (along with the data they store) until manually removed. Then it spins up a mysql container that stores its data in ipums_db_data, bound to a local port. Our seed script is run against that mysql instance and then the mysql container is stopped and removed.</p>
<p>Here's the script:</p>
<p>[code]<br />
#! /bin/bash</p>
<p>if ! docker inspect ipums_db_data &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then<br />
echo "Creating DB data container..."<br />
docker create -v /var/lib/mysql --name ipums_db_data mysql:latest &amp;gt;/dev/null 2&amp;gt;&amp;amp;1<br />
fi</p>
<p>if ! docker inspect ipums_extract_data &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then<br />
echo "Creating extract data container..."<br />
docker create -v /web --name ipums_extract_data mysql:latest &amp;gt;/dev/null 2&amp;gt;&amp;amp;1<br />
fi</p>
<p>echo "Starging MySQL container..."<br />
MYSQL_ID=`docker run -d -P -e "MYSQL_ROOT_PASSWORD=secret" --volumes-from ipums_db_data mysql:latest`<br />
MYSQL_PORT=`docker inspect --format='{{(index (index .NetworkSettings.Ports "3306/tcp") 0).HostPort}}' $MYSQL_ID`<br />
MYSQL_IP=127.0.0.1</p>
<p># Need to wait for the mysqld process to start<br />
echo "Waiting for mysqld to start..."<br />
sleep 15</p>
<p># Allow root to log in remotely<br />
docker exec $MYSQL_ID mysql -psecret -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'; FLUSH PRIVILEGES;"</p>
<p>cd util/initial_dev_setup</p>
<p>if which boot2docker &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then<br />
MYSQL_IP=`boot2docker ip`<br />
fi</p>
<p>echo "Running DB script..."<br />
env MYSQL_PORT_3306_TCP_ADDR=$MYSQL_IP MYSQL_PORT_3306_TCP_PORT=$MYSQL_PORT ruby 1.initialize_dbs.rb -uroot -psecret -t docker atus cps ipumsi usa napp</p>
<p>echo "Shutting MySQL container down..."<br />
docker stop $MYSQL_ID &amp;gt;/dev/null 2&amp;gt;&amp;amp;1<br />
docker rm $MYSQL_ID &amp;gt;/dev/null 2&amp;gt;&amp;amp;1<br />
[/code]</p>
<p>At this point, I can actually test my IPUMS container with these three commands from the project root:</p>
<p>[code]<br />
# docker build -t 'mpcit/ipums' .<br />
# docker run -e "MYSQL_ROOT_PASSWORD=secret" -d --name mysql --volumes-from ipums_db_data mysql:latest<br />
# docker run -e "RAILS_ENV=docker_cps" -e "IPUMS_PROJECT=cps" -p 3000:3000 --link mysql mpcit/ipums:latest<br />
[/code]</p>
<p>With any luck, opening http://localhost:3000 will render the homepage.</p>
<p>Now that I've got images containers, how should I wire them together? One option is a handful of shell scripts, but thankfully there's Fig (<a href="http://www.fig.sh">http://www.fig.sh</a>): a tool that can orchestrate running many containers for an application.</p>
<p>As a proof of concept, I want Fig configured to automatically start two different project websites and extract engines, a mysql server, and a reverse proxy. Fig allows grouping a set of containers and all their run parameters into a YAML file. Then it's just a matter of running "fig up".</p>
<p>Here's my fig.yml:</p>
<p>[code]<br />
mysql:<br />
image: mysql:latest<br />
environment:<br />
- MYSQL_ROOT_PASSWORD=secret<br />
volumes_from:<br />
- ipums_db_data</p>
<p>proxy:<br />
image: nginx:latest<br />
volumes:<br />
- docker/nginx.conf:/etc/nginx/conf.d/default.conf<br />
ports:<br />
- "5000:80"<br />
links:<br />
- atusweb<br />
- cpsweb</p>
<p>atusweb:<br />
build: .<br />
ports:<br />
- "3003:3000"<br />
links:<br />
- mysql<br />
volumes_from:<br />
- ipums_extract_data<br />
environment:<br />
- RAILS_ENV=docker_atus<br />
- IPUMS_PROJECT=atus<br />
- RUN_WEBSERVER=true<br />
- RUN_EXTRACT_ENGINE=</p>
<p>atusextract:<br />
build: .<br />
links:<br />
- mysql<br />
volumes_from:<br />
- ipums_extract_data<br />
environment:<br />
- RAILS_ENV=docker_atus<br />
- IPUMS_PROJECT=atus<br />
- RUN_WEBSERVER=<br />
- RUN_EXTRACT_ENGINE=true</p>
<p>cpsweb:<br />
build: .<br />
ports:<br />
- "3004:3000"<br />
links:<br />
- mysql<br />
volumes_from:<br />
- ipums_extract_data<br />
environment:<br />
- RAILS_ENV=docker_cps<br />
- IPUMS_PROJECT=cps<br />
- RUN_WEBSERVER=true<br />
- RUN_EXTRACT_ENGINE=</p>
<p>cpsextract:<br />
build: .<br />
links:<br />
- mysql<br />
volumes_from:<br />
- ipums_extract_data<br />
environment:<br />
- RAILS_ENV=docker_cps<br />
- IPUMS_PROJECT=cps<br />
- RUN_WEBSERVER=<br />
- RUN_EXTRACT_ENGINE=true<br />
[/code]</p>
<p>Now that everything is in place, running the application locally is extremely simple. It involves four steps:</p>
<ol>
<li>Install Docker and Fig</li>
<li>Pull a copy of our code</li>
<li>./docker_init.sh</li>
<li>fig up</li><br />
</ol></p>
<h3>Conclusions</h3></p>
<p>In the end, I have mixed feelings about the process and the technology. I'll say first off that I did most of this work under OSX and boot2docker. Running the Docker engine in a VM is not ideal; there's a very significant performance penalty, the networking configuration of Docker is made more complex, and the shared folder performance of VirtualBox makes mounting volumes from the local machine unusable.</p>
<p>There are other technologies that would allow similar automated bootstrapping. Vagrant would be an obvious choice, and one we've explored on other projects.</p>
<p>Docker has a few clear advantages, however. Compared to automating a set of VMs, Docker uses much, much less disk space and requires significantly less overhead (even with boot2docker, I'm only running 1 VM instead of 6). There is a very active Docker community and a great deal of images on Docker Hub to use or learn from.</p>
<p>Our IPUMS codebase is fairly complex and has a history of requiring an embarrassing amount of time to configure a development environment. Bootstrapping the entire process with <code><strong>./docker_init.sh &amp;&amp; fig up</strong></code> is hard to ignore.</p>
<h4>Further reading:</h4></p>
<ul>
<li>Docker Docs: <a href="https://docs.docker.com/">https://docs.docker.com/</a></li>
<li>Fig: <a href="http://www.fig.sh/">http://www.fig.sh/</a></li>
<li>Docker Docs, Understanding Docker: <a href="https://docs.docker.com/introduction/understanding-docker/">https://docs.docker.com/introduction/understanding-docker/</a></li>
<li>Phusion Blog: <a href="http://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/">http://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/</a></li>
<li>Mathew Miner Blog Post on Docker: <a href="http://matthewminer.com/2015/01/25/docker-dev-environment-for-web-app.html">http://matthewminer.com/2015/01/25/docker-dev-environment-for-web-app.html</a></li>
<li>Dev Ops U Blog Post on Docker Misconceptions: <a href="https://devopsu.com/blog/docker-misconceptions/">https://devopsu.com/blog/docker-misconceptions/</a></li><br />
</ul></p>
